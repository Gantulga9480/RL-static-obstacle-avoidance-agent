from typing import Any, Union
from Game.math.core import vector2d, point2d
from Game.color import BLACK
from pygame.color import Color
from pygame import Surface


class CartesianPlane:

    window: Surface
    window_size: tuple
    unit_length: float
    x_min: float
    y_min: float
    x_max: float
    y_max: float

    def __init__(self, window: Surface, window_size: tuple, parent_vector: Vector2d = None, unit_length: float = 1.0) -> None: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def CENTER(self) -> tuple: ...
    @property
    def SIZE(self) -> tuple: ...
    def to_XY(self, xy: tuple) -> tuple: ...
    def to_X(self, x: float) -> float: ...
    def to_Y(self, y: float) -> float: ...
    def to_xy(self, XY: tuple) -> tuple: ...
    def to_x(self, X: float) -> float: ...
    def to_y(self, Y: float) -> float: ...
    def createVector(self, x: float = 1, y: float = 0, max_length: float = 0, min_length: float = 0) -> Vector2d: ...
    def createRandomVector(self, max_length: float = 0, min_length: float = 0) -> Vector2d: ...
    def createPlane(self, x: float = 0, y: float = 0) -> CartesianPlane: ...
    def get_parent_vector(self) -> Vector2d: ...
    def get_center_point(self) -> point2d: ...
    def show(self) -> None: ...


class Vector2d(vector2d):

    plane: CartesianPlane
    window: Surface

    def __init__(self, space: CartesianPlane, x: float = 1, y: float = 0, max_length: float = 0, min_length: float = 0) -> None: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def HEAD(self) -> tuple: ...
    @property
    def TAIL(self) -> tuple: ...
    def unit(self, scale: float = 1, vector: bool = True) -> Any: ...
    def normal(self, scale: float, vector: bool) -> Any: ...
    def random(self) -> None: ...
    def show(self, color: Union[Color, tuple] = BLACK) -> None: ...
    def update(self) -> None: ...
